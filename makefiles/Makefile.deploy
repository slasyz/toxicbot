##
##**************************************************
##* Makefile commands for containerized deployment *
##**************************************************
##


REMOTE_NAME_PROD=toxic_prod


.PHONY: backup.container
backup.container:  ## create remote database (running in container) backup in local directory
	docker --context=$(REMOTE_NAME_PROD) exec -i $$(docker --context=$(REMOTE_NAME_PROD) ps -f name=toxic_prod_db --quiet) \
		pg_dump --data-only --inserts -h localhost -d toxic -U toxic | gzip > "$(BACKUP_FILENAME)-container.sql.gz"
	du -sh ./backups/*


.PHONY: debug
debug:             ## start dependencies
	export ENV=local
	docker build -t slasyz/toxicbot/db:latest --progress plain ./db/
	docker build -t slasyz/toxicbot/app:latest --progress plain .
	docker compose \
		-f compose/base.yml -f compose/debug.yml \
		-p toxic_local \
		up --build --force-recreate --remove-orphans

.PHONY: debug.attach
debug.attach:      ## attach to empty debug container
	docker exec -i --tty $$(docker ps -f name=toxic_local_app --quiet) /bin/bash


.PHONY: tests.integration
tests.integration: ## run tests in container locally
	docker compose -f compose/base.yml -f compose/tests.yml -p toxic_tests down -t 2
	docker volume rm -f toxic_tests_postgres_data
	@{ \
		export ENV=tests; \
		docker build -t slasyz/toxicbot/db:latest --progress plain ./db/; \
		docker build -t slasyz/toxicbot/app:latest --progress plain .; \
		docker compose \
			-f compose/base.yml -f compose/tests.yml \
			-p toxic_tests \
			up -d --build --force-recreate --remove-orphans -t 2; \
	}
	docker compose -f compose/base.yml -f compose/tests.yml -p toxic_tests exec app /bin/bash -c "make test.all"
	docker compose -f compose/base.yml -f compose/tests.yml -p toxic_tests down -t 2

.PHONY: _deploy
_deploy:
	@{ \
  		if [[ -z "$(ENV)" ]]; then \
			echo "Error: no environment specified."; \
			exit 1; \
		fi; \
	}
	docker --context "$(REMOTE_NAME)" build -t slasyz/toxicbot/db:latest --progress plain ./db/
	docker --context "$(REMOTE_NAME)" build -t slasyz/toxicbot/app:latest --progress plain .
	docker --context "$(REMOTE_NAME)" compose \
			-f compose/base.yml -f compose/$(ENV).yml \
			-p toxic_$(ENV) \
			up -d --build --force-recreate --remove-orphans -t 2; \

.PHONY: deploy.local
deploy.local:      ## run app in container locally
	make _deploy REMOTE_NAME="" ENV="local"

.PHONY: deploy.prod
deploy.prod:       ## run app in container remotely
	make _deploy REMOTE_NAME="$(REMOTE_NAME_PROD)" ENV="prod"


.PHONY: _init.container
_init.container:
	@{ \
  		if [[ -z "$(ENV)" ]]; then \
			echo "Error: no environment specified."; \
			exit 1; \
		fi; \
		if [[ -z "$$(docker network ls -f name=infra | grep infra)" ]]; then \
			docker network create infra; \
		fi; \
	}

.PHONY: init.local
init.local:        ## initialize stuff for container locally (secrets, ...)
	make _init.container REMOTE_NAME="" ENV="local"

.PHONY: init.prod
init.prod:         ## initialize stuff for container for production deployment (secrets, ...)
	make _init.container REMOTE_NAME="$(REMOTE_NAME_PROD)" ENV="prod"


.PHONY: init.tests
init.tests:        ## initialize stuff for container for integration tests (secrets, ...)
	@{ \
		if [[ -z "$$(docker network ls -f name=infra | grep infra)" ]]; then \
			docker network create --attachable infra; \
		fi; \
	}
	docker build -t slasyz/toxicbot/db:latest --progress plain ./db/
	docker build -t slasyz/toxicbot/app:latest --progress plain .


.PHONY: logs.prod.db
logs.prod.db:      ## show database production logs
	docker --context $(REMOTE_NAME_PROD) logs --tail 50 --follow --timestamps $$(docker --context $(REMOTE_NAME_PROD) ps -f name=toxic_prod_db --quiet)

.PHONY: logs.prod.app
logs.prod.app:     ## show application production logs
	docker --context $(REMOTE_NAME_PROD) logs --tail 50 --follow --timestamps $$(docker --context $(REMOTE_NAME_PROD) ps -f name=toxic_prod_app --quiet)
