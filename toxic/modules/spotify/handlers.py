import aiogram

from toxic.interfaces import CallbackHandler, CommandHandler
from toxic.modules.music.services.spotify import Spotify
from toxic.messenger.message import TextMessage, Message, CallbackReply


class AdminSpotifyAuthCallback(CallbackHandler):
    def __init__(self, spotify: Spotify):
        self.spotify = spotify

    @staticmethod
    def is_admins_only() -> bool:
        return True

    async def handle(self, callback: aiogram.types.CallbackQuery, message: aiogram.types.Message, args: dict) -> Message | CallbackReply | None:
        if self.spotify.is_authenticated():
            return CallbackReply('–£–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω.', show_alert=True)

        return TextMessage(
            text='–ü–µ—Ä–µ–π–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ, —á—Ç–æ–±—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è.\n\n–ê –ø–æ—Ç–æ–º –ø—Ä–∏—à–ª–∏ /spotify URL, –≥–¥–µ URL ‚Äî —ç—Ç–æ —Ç–æ, –∫—É–¥–∞ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏–ª–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.',
            markup=aiogram.types.InlineKeyboardMarkup(inline_keyboard=[[
                aiogram.types.InlineKeyboardButton('üëâ', self.spotify.get_auth_url()),
            ]])
        )


class AdminSpotifyAuthCommand(CommandHandler):
    def __init__(self, spotify: Spotify):
        self.spotify = spotify

    @staticmethod
    def is_admins_only() -> bool:
        return True

    async def handle(self, text: str, message: aiogram.types.Message, args: list[str]) -> str | list[Message] | None:
        if len(args) != 2:
            return '–ù—É–∂–Ω–æ –ø–∏—Å–∞—Ç—å —Ç–∞–∫: /spotify URL'

        url = args[1]
        self.spotify.authenticate(url)
        return '–£—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω.'
